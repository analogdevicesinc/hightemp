<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ht_dab_va108xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ht_dab_va108xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Feb 06 09:00:43 2018
<BR><P>
<H3>Maximum Stack Usage =        280 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; TaskMain &rArr; ParseCommand &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">OC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">OC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[35]">ISR_SampleADC01</a> from sampling_engine.o(i.ISR_SampleADC01) referenced from sampling_engine.o(i.SamplingEngineInit)
 <LI><a href="#[32]">ISR_SampleADCMux_RTDOnly</a> from sampling_engine.o(i.ISR_SampleADCMux_RTDOnly) referenced from sampling_engine.o(i.ConfigureMuxSampling)
 <LI><a href="#[32]">ISR_SampleADCMux_RTDOnly</a> from sampling_engine.o(i.ISR_SampleADCMux_RTDOnly) referenced from sampling_engine.o(i.ISR_SampleADCMux_TransitionToRTD)
 <LI><a href="#[31]">ISR_SampleADCMux_SampleRequestedChannels</a> from sampling_engine.o(i.ISR_SampleADCMux_SampleRequestedChannels) referenced from sampling_engine.o(i.ConfigureMuxSampling)
 <LI><a href="#[31]">ISR_SampleADCMux_SampleRequestedChannels</a> from sampling_engine.o(i.ISR_SampleADCMux_SampleRequestedChannels) referenced from sampling_engine.o(i.SamplingEngineInit)
 <LI><a href="#[33]">ISR_SampleADCMux_TransitionToRTD</a> from sampling_engine.o(i.ISR_SampleADCMux_TransitionToRTD) referenced from sampling_engine.o(i.ConfigureMuxSampling)
 <LI><a href="#[33]">ISR_SampleADCMux_TransitionToRTD</a> from sampling_engine.o(i.ISR_SampleADCMux_TransitionToRTD) referenced from sampling_engine.o(i.ISR_SampleADCMux_SampleRequestedChannels)
 <LI><a href="#[34]">ISR_SampleADCMux_VCCAndFinish</a> from sampling_engine.o(i.ISR_SampleADCMux_VCCAndFinish) referenced from sampling_engine.o(i.ISR_SampleADCMux_RTDOnly)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[a]">OC0_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[17]">OC13_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[18]">OC14_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[19]">OC15_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[1a]">OC16_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[1b]">OC17_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[1c]">OC18_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[1d]">OC19_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[1e]">OC20_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[1f]">OC21_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[20]">OC22_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[21]">OC23_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[22]">OC24_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[23]">OC25_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[24]">OC26_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[25]">OC27_IRQHandler</a> from sampling_engine.o(i.OC27_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[26]">OC28_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[27]">OC29_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[c]">OC2_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[28]">OC30_IRQHandler</a> from sampling_engine.o(i.OC30_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[29]">OC31_IRQHandler</a> from sampling_engine.o(i.OC31_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[37]">Reset_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_va108xx.o(i.SystemInit) referenced from startup_va108xx.o(.text)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[f]">VOR_GPIO_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[13]">VOR_I2C0_MS_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[14]">VOR_I2C0_SL_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[15]">VOR_I2C1_MS_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[16]">VOR_I2C1_SL_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[10]">VOR_SPI0_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[11]">VOR_SPI1_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[12]">VOR_SPI2_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[b]">VOR_TIM1_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[d]">VOR_UART0_IRQHandler</a> from uart.o(i.VOR_UART0_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[e]">VOR_UART1_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[2c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_va108xx.o(.text)
 <LI><a href="#[2e]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[2f]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[2d]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[36]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[30]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[2a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[51]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[93]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[94]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[95]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[96]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[97]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[98]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[7d]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7f]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_va108xx.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>OC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>OC13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>OC14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>OC15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>OC16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>OC17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>OC18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>OC19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>OC20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>OC21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>OC22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>OC23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>OC24_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>OC25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>OC26_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>OC28_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>OC29_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>OC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>VOR_GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>VOR_I2C0_MS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>VOR_I2C0_SL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>VOR_I2C1_MS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>VOR_I2C1_SL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>VOR_SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>VOR_SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>VOR_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>VOR_TIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>VOR_UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBurstModeData
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBurstModeData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTrigger
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAcquisitionParams
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[63]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[43]"></a>__0sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[45]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[55]"></a>_scanf_string</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempK10_from_adcCodeSum
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempK10_from_adcCodeSum
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempK10_from_adcCodeSum
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempK10_from_adcCodeSum
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempK10_from_adcCodeSum
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[44]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[2d]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[49]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>isspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isspace_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>__vfscanf</STRONG> (Thumb, 812 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[52]"></a>__ctype_lookup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[56]"></a>BuildCommand</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, parser.o(i.BuildCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BuildCommand &rArr; UART0Read
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Read
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[7c]"></a>ConfigureMemory</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, sampling_engine.o(i.ConfigureMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ConfigureMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
</UL>

<P><STRONG><a name="[58]"></a>ConfigureMuxSampling</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sampling_engine.o(i.ConfigureMuxSampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConfigureMuxSampling
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetADCMuxChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_SampleADCMux_VCCAndFinish
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
</UL>

<P><STRONG><a name="[5a]"></a>ConfigurePeripherals</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, sampling_engine.o(i.ConfigurePeripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConfigurePeripherals &rArr; _SetSPI1ToADC2
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSPI1ToADC2
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSPI1ToADC0
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetADCMuxChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
</UL>

<P><STRONG><a name="[5d]"></a>ConfigurePins</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, main.o(i.ConfigurePins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConfigurePins
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_GPIO_PinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>GetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sampling_engine.o(i.GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[67]"></a>GetTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sampling_engine.o(i.GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBurstModeData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[35]"></a>ISR_SampleADC01</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, sampling_engine.o(i.ISR_SampleADC01))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ISR_SampleADC01 &rArr; _SetSPI1ToADC2
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSPI1ToADC2
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetADCMuxChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampling_engine.o(i.SamplingEngineInit)
</UL>
<P><STRONG><a name="[32]"></a>ISR_SampleADCMux_RTDOnly</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sampling_engine.o(i.ISR_SampleADCMux_RTDOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ISR_SampleADCMux_RTDOnly
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetADCMuxChannel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sampling_engine.o(i.ISR_SampleADCMux_TransitionToRTD)
<LI> sampling_engine.o(i.ConfigureMuxSampling)
</UL>
<P><STRONG><a name="[31]"></a>ISR_SampleADCMux_SampleRequestedChannels</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sampling_engine.o(i.ISR_SampleADCMux_SampleRequestedChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISR_SampleADCMux_SampleRequestedChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetADCMuxChannel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sampling_engine.o(i.SamplingEngineInit)
<LI> sampling_engine.o(i.ConfigureMuxSampling)
</UL>
<P><STRONG><a name="[33]"></a>ISR_SampleADCMux_TransitionToRTD</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sampling_engine.o(i.ISR_SampleADCMux_TransitionToRTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISR_SampleADCMux_TransitionToRTD
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetADCMuxChannel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sampling_engine.o(i.ISR_SampleADCMux_SampleRequestedChannels)
<LI> sampling_engine.o(i.ConfigureMuxSampling)
</UL>
<P><STRONG><a name="[34]"></a>ISR_SampleADCMux_VCCAndFinish</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, sampling_engine.o(i.ISR_SampleADCMux_VCCAndFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ISR_SampleADCMux_VCCAndFinish &rArr; ConfigureMuxSampling
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureMuxSampling
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSPI1ToADC0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sampling_engine.o(i.ISR_SampleADCMux_RTDOnly)
</UL>
<P><STRONG><a name="[7a]"></a>IsDataAvailable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sampling_engine.o(i.IsDataAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintData
</UL>

<P><STRONG><a name="[7b]"></a>MarkDataAsConsumed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sampling_engine.o(i.MarkDataAsConsumed))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintData
</UL>

<P><STRONG><a name="[25]"></a>OC27_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sampling_engine.o(i.OC27_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>OC30_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sampling_engine.o(i.OC30_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>OC31_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sampling_engine.o(i.OC31_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OnlyOversample</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sampling_engine.o(i.OnlyOversample))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[61]"></a>ParseCommand</STRONG> (Thumb, 644 bytes, Stack size 72 bytes, parser.o(i.ParseCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ParseCommand &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetContinuousModeSamplePeriod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBurstModeSamplePeriod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAcquisitionParams
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyOversample
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempK10_from_adcCodeSum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0WriteStr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMain
</UL>

<P><STRONG><a name="[8b]"></a>ParserInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, parser.o(i.ParserInit))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>PrintADC01Samples</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, output.o(i.PrintADC01Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PrintADC01Samples
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0WriteStr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBurstModeData
</UL>

<P><STRONG><a name="[74]"></a>PrintADCMuxSamples</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, output.o(i.PrintADCMuxSamples))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PrintADCMuxSamples
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0WriteStr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBurstModeData
</UL>

<P><STRONG><a name="[75]"></a>PrintBurstModeData</STRONG> (Thumb, 134 bytes, Stack size 120 bytes, output.o(i.PrintBurstModeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PrintBurstModeData &rArr; getTempK10_from_adcCodeSum &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBurstResults
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTempK10_from_adcCodeSum
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintADCMuxSamples
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintADC01Samples
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0WriteStr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintData
</UL>

<P><STRONG><a name="[77]"></a>PrintContinuousModeData</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, output.o(i.PrintContinuousModeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PrintContinuousModeData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadContinuousResults
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0WriteStr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintData
</UL>

<P><STRONG><a name="[79]"></a>PrintData</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, output.o(i.PrintData))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PrintData &rArr; PrintBurstModeData &rArr; getTempK10_from_adcCodeSum &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkDataAsConsumed
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDataAvailable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintContinuousModeData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBurstModeData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0WriteStr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMain
</UL>

<P><STRONG><a name="[71]"></a>PrintVersion</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, output.o(i.PrintVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrintVersion &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0WriteStr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMain
</UL>

<P><STRONG><a name="[76]"></a>ReadBurstResults</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, sampling_engine.o(i.ReadBurstResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReadBurstResults
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBurstModeData
</UL>

<P><STRONG><a name="[78]"></a>ReadContinuousResults</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sampling_engine.o(i.ReadContinuousResults))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintContinuousModeData
</UL>

<P><STRONG><a name="[8a]"></a>SPIInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.SPIInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>SamplingEngineInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sampling_engine.o(i.SamplingEngineInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SamplingEngineInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>SetAcquisitionParams</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, sampling_engine.o(i.SetAcquisitionParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetAcquisitionParams &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[68]"></a>SetBurstModeSamplePeriod</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, sampling_engine.o(i.SetBurstModeSamplePeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SetBurstModeSamplePeriod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[6d]"></a>SetContinuousModeSamplePeriod</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sampling_engine.o(i.SetContinuousModeSamplePeriod))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[6e]"></a>SetMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sampling_engine.o(i.SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBurstModeSamplePeriod
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[66]"></a>SetTime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sampling_engine.o(i.SetTime))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[6a]"></a>Start</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sampling_engine.o(i.Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Start &rArr; SetAcquisitionParams &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePeripherals
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureMuxSampling
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureMemory
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTrigger
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAcquisitionParams
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[6f]"></a>Stop</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sampling_engine.o(i.Stop))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_va108xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>TaskMain</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.TaskMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TaskMain &rArr; ParseCommand &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>TimersInit</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, main.o(i.TimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimersInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>UART0Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart.o(i.UART0Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>UART0Read</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, uart.o(i.UART0Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART0Read
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCommand
</UL>

<P><STRONG><a name="[6b]"></a>UART0WriteStr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.UART0WriteStr))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintContinuousModeData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBurstModeData
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintADCMuxSamples
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintADC01Samples
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[5e]"></a>VOR_GPIO_PinMux</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, driver.common.o(i.VOR_GPIO_PinMux))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSPI1ToADC2
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSPI1ToADC0
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePins
</UL>

<P><STRONG><a name="[d]"></a>VOR_UART0_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(i.VOR_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a4]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[64]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBurstModeData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[50]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[60]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sampling_engine.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTrigger
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAcquisitionParams
</UL>

<P><STRONG><a name="[65]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, parser.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[72]"></a>getTempK10_from_adcCodeSum</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, output.o(i.getTempK10_from_adcCodeSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getTempK10_from_adcCodeSum &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBurstModeData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCommand
</UL>

<P><STRONG><a name="[2a]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; TaskMain &rArr; ParseCommand &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SamplingEngineInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParserInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMain
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8f]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[8d]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[91]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[90]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[3a]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[7e]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[82]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[5f]"></a>ConfigureTrigger</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, sampling_engine.o(i.ConfigureTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ConfigureTrigger &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
</UL>

<P><STRONG><a name="[59]"></a>_SetADCMuxChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sampling_engine.o(i._SetADCMuxChannel))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_SampleADCMux_TransitionToRTD
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_SampleADCMux_SampleRequestedChannels
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_SampleADCMux_RTDOnly
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_SampleADC01
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePeripherals
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureMuxSampling
</UL>

<P><STRONG><a name="[5c]"></a>_SetSPI1ToADC0</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sampling_engine.o(i._SetSPI1ToADC0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetSPI1ToADC0
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_GPIO_PinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_SampleADCMux_VCCAndFinish
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePeripherals
</UL>

<P><STRONG><a name="[5b]"></a>_SetSPI1ToADC2</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sampling_engine.o(i._SetSPI1ToADC2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetSPI1ToADC2
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_GPIO_PinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_SampleADC01
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePeripherals
</UL>

<P><STRONG><a name="[8e]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[84]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[86]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[85]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[36]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[2f]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[54]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[53]"></a>_scanf_real</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
